<html>
<head>
  <title>OpenStudio to three.js</title>
  <style>canvas {
      width: 100%;
      height: 100%
  }</style>
</head>
<body>

<div id="container"></div>

<script src="https://rawgithub.com/mrdoob/three.js/master/build/three.js"></script>
<script src="http://threejs.org/examples/js/controls/OrbitControls.js"></script>
<script src="http://threejs.org/examples/js/Detector.js"></script>

<script>

    if (!Detector.webgl) Detector.addGetWebGLMessage();

    var container;

    var camera, controls, scene, geometry, mesh, renderer, light;

    function init() {

        // camera
        camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 1000);
        camera.position.x = <%= camera_x %>;
        camera.position.y = <%= camera_y %>;
        camera.position.z = <%= camera_z %>;
        camera.lookAt(new THREE.Vector3(<%= camera_look_x %>, <%= camera_look_y %>, <%= camera_look_z %>))

        // controls
        controls = new THREE.OrbitControls(camera);
        controls.addEventListener('change', render);

        // scene
        scene = new THREE.Scene();
        scene.fog = new THREE.FogExp2(0xcccccc, 0.002);

        var materials = [];

        var floor_ext = new THREE.MeshLambertMaterial({ color: 0x808080, ambient: 0x808080, shading: THREE.SmoothShading, wireframe: false, opacity: 1.0, transparent: false, side: THREE.FrontSide, combine: THREE.MixOperation });
        var floor_ext_index = materials.length;
        materials.push(floor_ext);

        var floor_int = new THREE.MeshLambertMaterial({ color: 0xbfbfbf, ambient: 0xbfbfbf, shading: THREE.SmoothShading, wireframe: false, opacity: 1.0, transparent: false, side: THREE.BackSide, combine: THREE.MixOperation });
        var floor_int_index = materials.length;
        materials.push(floor_int);


        var wall_ext = new THREE.MeshLambertMaterial({ color: 0xccb266, ambient: 0xccb266, shading: THREE.SmoothShading, wireframe: false, opacity: 1.0, transparent: false, side: THREE.FrontSide, combine: THREE.MixOperation });
        var wall_ext_index = materials.length;
        materials.push(wall_ext);

        var wall_int = new THREE.MeshLambertMaterial({ color: 0xebe2c5, ambient: 0xebe2c5, shading: THREE.SmoothShading, wireframe: false, opacity: 1.0, transparent: false, side: THREE.BackSide, combine: THREE.MixOperation });
        var wall_int_index = materials.length;
        materials.push(wall_int);


        var roof_ext = new THREE.MeshLambertMaterial({ color: 0x994c4c, ambient: 0x994c4c, shading: THREE.SmoothShading, wireframe: false, opacity: 1.0, transparent: false, side: THREE.FrontSide, combine: THREE.MixOperation });
        var roof_ext_index = materials.length;
        materials.push(roof_ext);

        var roof_int = new THREE.MeshLambertMaterial({ color: 0xdbca95, ambient: 0xdbca95, shading: THREE.SmoothShading, wireframe: false, opacity: 1.0, transparent: false, side: THREE.BackSide, combine: THREE.MixOperation });
        var roof_int_index = materials.length;
        materials.push(roof_int);


        var window_ext = new THREE.MeshLambertMaterial({ color: 0x66b2cc, ambient: 0x66b2cc, shading: THREE.SmoothShading, wireframe: false, opacity: 0.6, transparent: true, side: THREE.FrontSide, combine: THREE.MixOperation });
        var window_ext_index = materials.length;
        materials.push(window_ext);

        var window_int = new THREE.MeshLambertMaterial({ color: 0xc0e2eb, ambient: 0xc0e2eb, shading: THREE.SmoothShading, wireframe: false, opacity: 0.6, transparent: true, side: THREE.BackSide, combine: THREE.MixOperation });
        var window_int_index = materials.length;
        materials.push(window_int);

        door_ext = new THREE.Color(0x852b99);
        door_int = new THREE.Color(0xcabc95);

        site_shading = new THREE.Color(0x954b01);
        site_shading_back = new THREE.Color(0xdcbbd1);

        building_shading = new THREE.Color(0x954b01);
        building_shading_back = new THREE.Color(0xd8cbe5);

        space_shading = new THREE.Color(0x4c6eb2);
        space_shading_back = new THREE.Color(0xe038b7);

        interior_partition_surface = new THREE.Color(0x9ebc8f);
        interior_partition_surface_back = new THREE.Color(0xd5e2cf);

        // lights
        light = new THREE.DirectionalLight(0xffffff, 1.0);
        //light = new THREE.SpotLight( 0xffffff, 1.0 );
        light.position.set(250, 300, -50);
        light.target.position.set(5, 0, -5);
        light.castShadow = true;
        light.onlyShadow = false;
        light.shadowDarkness = 0.3;
        light.shadowMapWidth = 1024;
        light.shadowMapHeight = 1024;
        //light.shadowCameraVisible = true; // for debugging
        light.shadowCameraNear = 2;
        light.shadowCameraFar = 5000; // camera.far
        light.shadowCameraLeft = -200;
        light.shadowCameraRight = 200;
        light.shadowCameraTop = 200;
        light.shadowCameraBottom = -200;
        scene.add(light);

        light = new THREE.AmbientLight(0x808080);
        scene.add(light);

        // geometry
        <%= scene_geometry %>

        // renderer
        renderer = new THREE.WebGLRenderer({ antialias: true });
        //renderer = new THREE.CanvasRenderer( );
        renderer.setClearColor(scene.fog.color, 1)
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.shadowMapEnabled = true;
        renderer.shadowMapSoft = true;
        renderer.shadowMapType = THREE.PCFSoftShadowMap;

        renderer.shadowCameraNear = 3;
        renderer.shadowCameraFar = camera.far;
        renderer.shadowCameraFov = 50;

        renderer.shadowMapBias = 0.0039;
        renderer.shadowMapDarkness = 0.5;
        renderer.shadowMapWidth = 1024;
        renderer.shadowMapHeight = 1024;

        container = document.getElementById('container');
        container.appendChild(renderer.domElement);

        window.addEventListener('resize', onWindowResize, false);
    }

    function render() {
        renderer.render(scene, camera);
    }

    function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        render();
    }

    function animate() {
        requestAnimationFrame(animate);
        render();
        controls.update();
    }

    init();
    animate();

</script>
</body>
</html>